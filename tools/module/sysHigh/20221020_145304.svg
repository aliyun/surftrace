<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg onload="init(evt)" xmlns="http://www.w3.org/2000/svg" height="870" width="1200" version="2.0" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1200 870">
  <defs>
    <linearGradient x2="0" y1="0" x1="0" y2="1" id="background">
      <stop stop-color="#eeeeee" offset="5%"/>
      <stop stop-color="#eeeeb0" offset="95%"/>
    </linearGradient>
  </defs>
  <style type="text/css">
    	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
  </style>
  <script type="text/ecmascript">
    <![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Tips: " + g_to_desc(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_desc(e) {
		var text = find_child(e, "desc").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
  </script>
  <rect y="0" width="1200.0" height="295.0" x="0.0" fill="url(#background)"/>
  <text y="24" x="600.0" id="title">sysHigh for cpu 0</text>
  <text y="279.0" x="10.0" id="details"> </text>
  <text y="24" x="10.0" class="hide" id="unzoom">Reset Zoom</text>
  <text y="24" x="1090" id="search">Search</text>
  <text y="279.0" x="1090" id="matched"/>
  <g id="frames">
    <g>
      <title>total</title>
      <desc>total (catch 552 samples, 100.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="1180" y="247.0" x="10" fill="rgb(242,123,0)"/>
      <text y="257.5" x="13">total</text>
    </g>
    <g>
      <title>x86_64_start_kernel</title>
      <desc>x86_64_start_kernel (catch 138 samples, 25.000000% from root, 25.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="295" y="231.0" x="10" fill="rgb(251,54,22)"/>
      <text y="241.5" x="13">x86_64_start_kernel</text>
    </g>
    <g>
      <title>x86_64_start_reservations</title>
      <desc>x86_64_start_reservations (catch 138 samples, 25.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="295" y="215.0" x="10" fill="rgb(227,65,21)"/>
      <text y="225.5" x="13">x86_64_start_reservations</text>
    </g>
    <g>
      <title>start_kernel</title>
      <desc>start_kernel (catch 138 samples, 25.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="295" y="199.0" x="10" fill="rgb(248,172,11)"/>
      <text y="209.5" x="13">start_kernel</text>
    </g>
    <g>
      <title>rest_init</title>
      <desc>rest_init (catch 138 samples, 25.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="295" y="183.0" x="10" fill="rgb(241,151,39)"/>
      <text y="193.5" x="13">rest_init</text>
    </g>
    <g>
      <title>cpu_startup_entry</title>
      <desc>cpu_startup_entry (catch 138 samples, 25.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="295" y="167.0" x="10" fill="rgb(246,32,43)"/>
      <text y="177.5" x="13">cpu_startup_entry</text>
    </g>
    <g>
      <title>default_idle_call</title>
      <desc>default_idle_call (catch 138 samples, 25.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="295" y="151.0" x="10" fill="rgb(225,33,40)"/>
      <text y="161.5" x="13">default_idle_call</text>
    </g>
    <g>
      <title>arch_cpu_idle</title>
      <desc>arch_cpu_idle (catch 138 samples, 25.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="295" y="135.0" x="10" fill="rgb(235,18,43)"/>
      <text y="145.5" x="13">arch_cpu_idle</text>
    </g>
    <g>
      <title>default_idle</title>
      <desc>default_idle (catch 138 samples, 25.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="295" y="119.0" x="10" fill="rgb(202,21,34)"/>
      <text y="129.5" x="13">default_idle</text>
    </g>
    <g>
      <title>reschedule_interrupt</title>
      <desc>reschedule_interrupt (catch 1 samples, 0.181159% from root, 0.724638% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="2" y="103.0" x="10" fill="rgb(220,147,7)"/>
      <text y="113.5" x="13"> </text>
    </g>
    <g>
      <title>smp_reschedule_interrupt</title>
      <desc>smp_reschedule_interrupt (catch 1 samples, 0.181159% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="2" y="87.0" x="10" fill="rgb(242,10,14)"/>
      <text y="97.5" x="13"> </text>
    </g>
    <g>
      <title>irq_exit</title>
      <desc>irq_exit (catch 1 samples, 0.181159% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="2" y="71.0" x="10" fill="rgb(247,178,9)"/>
      <text y="81.5" x="13"> </text>
    </g>
    <g>
      <title>startup_64</title>
      <desc>startup_64 (catch 1 samples, 0.181159% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="2" y="55.0" x="10" fill="rgb(226,29,42)"/>
      <text y="65.5" x="13"> </text>
    </g>
    <g>
      <title>native_safe_halt</title>
      <desc>native_safe_halt (catch 137 samples, 24.818841% from root, 99.275362% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="292" y="103.0" x="12" fill="rgb(233,27,33)"/>
      <text y="113.5" x="15">native_safe_halt</text>
    </g>
    <g>
      <title>entry_SYSCALL_64_after_swapgs</title>
      <desc>entry_SYSCALL_64_after_swapgs (catch 414 samples, 75.000000% from root, 75.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="885" y="231.0" x="305" fill="rgb(245,138,44)"/>
      <text y="241.5" x="308">entry_SYSCALL_64_after_swapgs</text>
    </g>
    <g>
      <title>do_syscall_64</title>
      <desc>do_syscall_64 (catch 414 samples, 75.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="885" y="215.0" x="305" fill="rgb(217,69,35)"/>
      <text y="225.5" x="308">do_syscall_64</text>
    </g>
    <g>
      <title>sys_write</title>
      <desc>sys_write (catch 414 samples, 75.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="885" y="199.0" x="305" fill="rgb(237,110,5)"/>
      <text y="209.5" x="308">sys_write</text>
    </g>
    <g>
      <title>vfs_write</title>
      <desc>vfs_write (catch 414 samples, 75.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="885" y="183.0" x="305" fill="rgb(200,114,8)"/>
      <text y="193.5" x="308">vfs_write</text>
    </g>
    <g>
      <title>__vfs_write</title>
      <desc>__vfs_write (catch 414 samples, 75.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="885" y="167.0" x="305" fill="rgb(209,202,24)"/>
      <text y="177.5" x="308">__vfs_write</text>
    </g>
    <g>
      <title>proc_reg_write</title>
      <desc>proc_reg_write (catch 414 samples, 75.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="885" y="151.0" x="305" fill="rgb(210,200,25)"/>
      <text y="161.5" x="308">proc_reg_write</text>
    </g>
    <g>
      <title>sys_high_write [sys_high]</title>
      <desc>sys_high_write [sys_high] (catch 414 samples, 75.000000% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="885" y="135.0" x="305" fill="rgb(213,173,43)"/>
      <text y="145.5" x="308">sys_high_write [sys_high]</text>
    </g>
    <g>
      <title>apic_timer_interrupt</title>
      <desc>apic_timer_interrupt (catch 8 samples, 1.449275% from root, 1.932367% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="17" y="119.0" x="305" fill="rgb(240,217,33)"/>
      <text y="129.5" x="308"> </text>
    </g>
    <g>
      <title>smp_apic_timer_interrupt</title>
      <desc>smp_apic_timer_interrupt (catch 8 samples, 1.449275% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="17" y="103.0" x="305" fill="rgb(202,9,27)"/>
      <text y="113.5" x="308"> </text>
    </g>
    <g>
      <title>irq_exit</title>
      <desc>irq_exit (catch 8 samples, 1.449275% from root, 100.000000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="17" y="87.0" x="305" fill="rgb(219,15,10)"/>
      <text y="97.5" x="308"> </text>
    </g>
    <g>
      <title>__do_softirq</title>
      <desc>__do_softirq (catch 7 samples, 1.268116% from root, 87.500000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="14" y="71.0" x="305" fill="rgb(248,87,38)"/>
      <text y="81.5" x="308"> </text>
    </g>
    <g>
      <title>_raw_spin_lock_irq</title>
      <desc>_raw_spin_lock_irq (catch 1 samples, 0.181159% from root, 14.285714% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="2" y="55.0" x="305" fill="rgb(241,222,16)"/>
      <text y="65.5" x="308"> </text>
    </g>
    <g>
      <title>run_timer_softirq</title>
      <desc>run_timer_softirq (catch 1 samples, 0.181159% from root, 12.500000% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="2" y="71.0" x="319" fill="rgb(252,48,33)"/>
      <text y="81.5" x="322"> </text>
    </g>
    <g>
      <title>sys_high_store [sys_high]</title>
      <desc>sys_high_store [sys_high] (catch 406 samples, 73.550725% from root, 98.067633% from parent)</desc>
      <rect rx="2" ry="2" height="16.0" width="867" y="119.0" x="322" fill="rgb(225,71,7)"/>
      <text y="129.5" x="325">sys_high_store [sys_high]</text>
    </g>
  </g>
</svg>